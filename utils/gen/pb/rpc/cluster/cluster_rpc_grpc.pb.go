// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: cluster_rpc.proto

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ToClusterRpcServiceClient is the client API for ToClusterRpcService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ToClusterRpcServiceClient interface {
	ClusterRpcUserCall(ctx context.Context, in *ClusterRpcUserCallRequest, opts ...grpc.CallOption) (*ClusterRpcUserCallResponse, error)
}

type toClusterRpcServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewToClusterRpcServiceClient(cc grpc.ClientConnInterface) ToClusterRpcServiceClient {
	return &toClusterRpcServiceClient{cc}
}

func (c *toClusterRpcServiceClient) ClusterRpcUserCall(ctx context.Context, in *ClusterRpcUserCallRequest, opts ...grpc.CallOption) (*ClusterRpcUserCallResponse, error) {
	out := new(ClusterRpcUserCallResponse)
	err := c.cc.Invoke(ctx, "/proto.ToClusterRpcService/ClusterRpcUserCall", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ToClusterRpcServiceServer is the server API for ToClusterRpcService service.
// All implementations must embed UnimplementedToClusterRpcServiceServer
// for forward compatibility
type ToClusterRpcServiceServer interface {
	ClusterRpcUserCall(context.Context, *ClusterRpcUserCallRequest) (*ClusterRpcUserCallResponse, error)
	mustEmbedUnimplementedToClusterRpcServiceServer()
}

// UnimplementedToClusterRpcServiceServer must be embedded to have forward compatible implementations.
type UnimplementedToClusterRpcServiceServer struct {
}

func (UnimplementedToClusterRpcServiceServer) ClusterRpcUserCall(context.Context, *ClusterRpcUserCallRequest) (*ClusterRpcUserCallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClusterRpcUserCall not implemented")
}
func (UnimplementedToClusterRpcServiceServer) mustEmbedUnimplementedToClusterRpcServiceServer() {}

// UnsafeToClusterRpcServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ToClusterRpcServiceServer will
// result in compilation errors.
type UnsafeToClusterRpcServiceServer interface {
	mustEmbedUnimplementedToClusterRpcServiceServer()
}

func RegisterToClusterRpcServiceServer(s grpc.ServiceRegistrar, srv ToClusterRpcServiceServer) {
	s.RegisterService(&ToClusterRpcService_ServiceDesc, srv)
}

func _ToClusterRpcService_ClusterRpcUserCall_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClusterRpcUserCallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ToClusterRpcServiceServer).ClusterRpcUserCall(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ToClusterRpcService/ClusterRpcUserCall",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ToClusterRpcServiceServer).ClusterRpcUserCall(ctx, req.(*ClusterRpcUserCallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ToClusterRpcService_ServiceDesc is the grpc.ServiceDesc for ToClusterRpcService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ToClusterRpcService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ToClusterRpcService",
	HandlerType: (*ToClusterRpcServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ClusterRpcUserCall",
			Handler:    _ToClusterRpcService_ClusterRpcUserCall_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cluster_rpc.proto",
}
